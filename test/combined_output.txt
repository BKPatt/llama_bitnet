# AbsmeanQuantization.py
#==============================================================================
import torch
import math

class AbsmeanQuantization:
    @staticmethod
    def quantize(x: torch.Tensor) -> tuple[torch.Tensor, torch.Tensor]:
        scale = torch.mean(torch.abs(x), dim=-1, keepdim=True)
        q = torch.round(x / (scale + 1e-8)).clamp(-1, 1)
        return q.to(torch.int8), scale

    @staticmethod
    def dequantize(q: torch.Tensor, scale: torch.Tensor) -> torch.Tensor:
        return q.float() * scale

    @staticmethod
    def pack(q: torch.Tensor, batch_size: int = 1000000) -> torch.Tensor:
        q_unsigned = (q + 1).to(torch.uint8)
        num_elements = q.numel()
        packed_size = math.ceil(num_elements * 1.58 / 8)
        q_unsigned = q_unsigned.reshape(-1)
        packed = torch.zeros(packed_size, dtype=torch.uint8, device=q.device)
        
        for start in range(0, num_elements, batch_size):
            end = min(start + batch_size, num_elements)
            batch = q_unsigned[start:end]
            
            bit_indices = torch.arange(start, end, device=q.device) * 1.58
            byte_indices = (bit_indices // 8).long()
            bit_offsets = (bit_indices % 8).long()
            
            packed[byte_indices] |= batch << bit_offsets
            
            overflow_mask = bit_offsets > 6
            if overflow_mask.any():
                packed[byte_indices[overflow_mask] + 1] |= batch[overflow_mask] >> (8 - bit_offsets[overflow_mask])
        
        return packed

    @staticmethod
    def unpack(packed: torch.Tensor, original_shape: torch.Size, batch_size: int = 1000000) -> torch.Tensor:
        num_elements = original_shape.numel()
        q_unsigned = torch.zeros(num_elements, dtype=torch.uint8, device=packed.device)
        
        for start in range(0, num_elements, batch_size):
            end = min(start + batch_size, num_elements)
            
            bit_indices = torch.arange(start, end, device=packed.device) * 1.58
            byte_indices = (bit_indices // 8).long()
            bit_offsets = (bit_indices % 8).long()
            
            q_unsigned[start:end] = (packed[byte_indices] >> bit_offsets) & 0b11
            
            overflow_mask = bit_offsets > 6
            if overflow_mask.any():
                q_unsigned[start:end][overflow_mask] |= (packed[byte_indices[overflow_mask] + 1] << (8 - bit_offsets[overflow_mask])) & 0b11
        
        q = q_unsigned.to(torch.int8) - 1
        return q.reshape(original_shape)

# BitNetAttention.py
#==============================================================================
import math
import torch
import torch.nn as nn
from typing import Optional, Tuple
from BitNetB158Config import BitNetB158Config
from QuantizedLinear import QuantizedLinear
from RotaryEmbedding import RotaryEmbedding
from RotaryEmbedding import apply_rotary_pos_emb

class BitNetAttention(nn.Module):
    def __init__(self, config: BitNetB158Config):
        super().__init__()
        self.config = config
        self.hidden_size = config.hidden_size
        self.num_heads = config.num_attention_heads
        self.head_dim = config.hidden_size // config.num_attention_heads
        self.num_key_value_heads = config.num_key_value_heads
        self.num_key_value_groups = self.num_heads // self.num_key_value_heads
        self.max_position_embeddings = config.max_position_embeddings

        self.q_proj = QuantizedLinear(self.hidden_size, self.num_heads * self.head_dim, bias=config.attention_bias)
        self.k_proj = QuantizedLinear(self.hidden_size, self.num_heads * self.head_dim, bias=config.attention_bias)
        self.v_proj = QuantizedLinear(self.hidden_size, self.num_heads * self.head_dim, bias=config.attention_bias)
        self.o_proj = QuantizedLinear(self.num_heads * self.head_dim, self.hidden_size, bias=config.attention_bias)

        self.rotary_emb = RotaryEmbedding(
            self.head_dim,
            max_position_embeddings=self.max_position_embeddings,
            base=config.rope_theta,
        )

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Tuple[torch.Tensor]] = None,
        output_attentions: bool = False,
        use_cache: bool = False,
    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:
        bsz, q_len, _ = hidden_states.size()

        # Projection to query, key, and value states
        query_states = self.q_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        key_states = self.k_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        value_states = self.v_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)

        # Handling past key values for incremental decoding
        if past_key_value is not None:
            key_states = torch.cat([past_key_value[0], key_states], dim=-2)  # Concatenating along sequence length dimension
            value_states = torch.cat([past_key_value[1], value_states], dim=-2)

        # Rotary position embedding, if applicable
        if position_ids is not None:
            cos, sin = self.rotary_emb(value_states, seq_len=key_states.shape[-2])
            query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)

        # Calculate attention scores using scaled dot product
        attn_weights = torch.matmul(query_states, key_states.transpose(-2, -1)) / math.sqrt(self.head_dim)

        # Apply attention mask, if provided
        if attention_mask is not None:
            attn_weights = attn_weights + attention_mask.unsqueeze(1).unsqueeze(2)

        attn_weights = torch.softmax(attn_weights, dim=-1)

        # Attention output calculation
        attn_output = torch.matmul(attn_weights, value_states)

        # Reshape attention output back to the original input format
        attn_output = attn_output.transpose(1, 2).contiguous().view(bsz, q_len, self.hidden_size)
        attn_output = self.o_proj(attn_output)

        outputs = (attn_output,)
        if output_attentions:
            outputs += (attn_weights,)
        if use_cache:
            outputs += (key_states, value_states)

        return outputs

def repeat_kv(hidden_states: torch.Tensor, n_rep: int) -> torch.Tensor:
    """
    This is the equivalent of torch.repeat_interleave(x, dim=1, repeats=n_rep).
    The hidden states go from (batch, num_key_value_heads, seqlen, head_dim) to (batch, num_attention_heads, seqlen, head_dim)
    """
    batch, num_key_value_heads, slen, head_dim = hidden_states.shape
    if n_rep == 1:
        return hidden_states
    hidden_states = hidden_states[:, :, None, :, :].expand(batch, num_key_value_heads, n_rep, slen, head_dim)
    return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)

# BitNetB158Config.py
#==============================================================================
import json
from dataclasses import dataclass, asdict

@dataclass
class BitNetB158Config:
    vocab_size: int = 32000
    hidden_size: int = 4096
    intermediate_size: int = 11008
    num_hidden_layers: int = 32
    num_attention_heads: int = 32
    num_key_value_heads: int = 32
    max_position_embeddings: int = 4096
    rms_norm_eps: float = 1e-5
    initializer_range: float = 0.02
    use_cache: bool = True
    pad_token_id: int = 0
    bos_token_id: int = 1
    eos_token_id: int = 2
    tie_word_embeddings: bool = False
    quantization_bits: float = 1.58
    rope_theta: float = 10000.0
    rope_scaling: dict = None
    attention_bias: bool = False
    attention_dropout: float = 0.0
    hidden_dropout: float = 0.0
    quant_type: str = "absmean"
    output_attentions: bool = False
    output_hidden_states: bool = False
    num_attention_heads: int = 32
    num_key_value_heads: int = 8

    def __post_init__(self):
        self.head_dim = self.hidden_size // self.num_attention_heads
        assert self.head_dim * self.num_attention_heads == self.hidden_size, "hidden_size must be divisible by num_attention_heads"
        if self.rope_scaling is None:
            self.rope_scaling = {"type": "linear", "factor": 1.0}

    @classmethod
    def from_json(cls, json_file):
        with open(json_file, 'r') as f:
            config_dict = json.load(f)
        return cls(**config_dict)

    def to_json(self, json_file):
        with open(json_file, 'w') as f:
            json.dump(asdict(self), f, indent=2)


# BitNetB158Layer.py
#==============================================================================
import torch
import torch.nn as nn
from typing import Optional, Tuple
from BitNetB158Config import BitNetB158Config
from BitNetAttention import BitNetAttention
from BitNetMLP import BitNetMLP
from RMSNorm import RMSNorm

class BitNetB158Layer(nn.Module):
    def __init__(self, config: BitNetB158Config):
        super().__init__()
        self.config = config
        self.hidden_size = config.hidden_size
        self.self_attn = BitNetAttention(config)
        self.mlp = BitNetMLP(config)
        self.input_layernorm = RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.post_attention_layernorm = RMSNorm(config.hidden_size, eps=config.rms_norm_eps)

    def forward(
            self,
            hidden_states: torch.Tensor,
            attention_mask: Optional[torch.Tensor] = None,
            position_ids: Optional[torch.LongTensor] = None,
            past_key_value: Optional[Tuple[torch.Tensor]] = None,
            output_attentions: Optional[bool] = False,
            use_cache: Optional[bool] = False,
        ) -> Tuple[torch.FloatTensor, Optional[Tuple[torch.FloatTensor, torch.FloatTensor]]]:
        residual = hidden_states

        hidden_states = self.input_layernorm(hidden_states)

        # Self Attention
        hidden_states, self_attn_weights, present_key_value = self.self_attn(
            hidden_states=hidden_states,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_value=past_key_value,
            output_attentions=output_attentions,
            use_cache=use_cache,
        )
        hidden_states = residual + hidden_states

        # Fully Connected
        residual = hidden_states
        hidden_states = self.post_attention_layernorm(hidden_states)
        hidden_states = self.mlp(hidden_states)
        hidden_states = residual + hidden_states

        outputs = (hidden_states,)

        if output_attentions:
            outputs += (self_attn_weights,)

        if use_cache:
            outputs += (present_key_value,)

        return outputs


# BitNetB158Model.py
#==============================================================================
import torch
import torch.nn as nn
from typing import Optional, List, Union, Tuple
from BitNetB158Config import BitNetB158Config
from BitNetB158Layer import BitNetB158Layer
from RMSNorm import RMSNorm

class BitNetB158Model(nn.Module):
    def __init__(self, config: BitNetB158Config):
        super().__init__()
        self.config = config
        self.padding_idx = config.pad_token_id
        self.vocab_size = config.vocab_size

        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)
        self.layers = nn.ModuleList([BitNetB158Layer(config) for _ in range(config.num_hidden_layers)])
        self.norm = RMSNorm(config.hidden_size, eps=config.rms_norm_eps)

    def get_input_embeddings(self):
        return self.embed_tokens

    def set_input_embeddings(self, value):
        self.embed_tokens = value

    def forward(
        self,
        input_ids: Optional[torch.LongTensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
    ) -> Union[Tuple, dict]:
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        use_cache = use_cache if use_cache is not None else self.config.use_cache

        if input_ids is not None and inputs_embeds is not None:
            raise ValueError("You cannot specify both input_ids and inputs_embeds at the same time")
        elif input_ids is not None:
            input_shape = input_ids.size()
            input_ids = input_ids.view(-1, input_shape[-1])
        elif inputs_embeds is not None:
            input_shape = inputs_embeds.size()[:-1]
        else:
            raise ValueError("You have to specify either input_ids or inputs_embeds")

        if inputs_embeds is None:
            inputs_embeds = self.embed_tokens(input_ids)

        batch_size, seq_length = input_shape

        # Past key values length
        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0
        
        if position_ids is None:
            device = inputs_embeds.device
            position_ids = torch.arange(
                past_key_values_length, seq_length + past_key_values_length, dtype=torch.long, device=device
            )
            position_ids = position_ids.unsqueeze(0).view(-1, seq_length)
        else:
            position_ids = position_ids.view(-1, seq_length).long()

        if attention_mask is None:
            attention_mask = torch.ones((batch_size, seq_length), device=inputs_embeds.device)

        attention_mask = self._prepare_decoder_attention_mask(
            attention_mask, (batch_size, seq_length), inputs_embeds, past_key_values_length
        )

        hidden_states = inputs_embeds

        if past_key_values is None:
            past_key_values = tuple([None] * len(self.layers))

        all_hidden_states = () if output_hidden_states else None
        all_self_attns = () if output_attentions else None
        next_decoder_cache = () if use_cache else None

        for idx, (decoder_layer, past_key_value) in enumerate(zip(self.layers, past_key_values)):
            if output_hidden_states:
                all_hidden_states += (hidden_states,)

            layer_outputs = decoder_layer(
                hidden_states,
                attention_mask=attention_mask,
                position_ids=position_ids,
                past_key_value=past_key_value,
                output_attentions=output_attentions,
                use_cache=use_cache,
            )

            hidden_states = layer_outputs[0]

            if use_cache:
                next_decoder_cache += (layer_outputs[2 if output_attentions else 1],)

            if output_attentions:
                all_self_attns += (layer_outputs[1],)

        hidden_states = self.norm(hidden_states)

        if output_hidden_states:
            all_hidden_states += (hidden_states,)

        next_cache = next_decoder_cache if use_cache else None

        if not return_dict:
            return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)

        return {
            "last_hidden_state": hidden_states,
            "past_key_values": next_cache,
            "hidden_states": all_hidden_states,
            "attentions": all_self_attns,
        }

    def _prepare_decoder_attention_mask(self, attention_mask, input_shape, inputs_embeds, past_key_values_length):
        # create causal mask
        # [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]
        combined_attention_mask = None
        if input_shape[-1] > 1:
            combined_attention_mask = _make_causal_mask(
                input_shape,
                inputs_embeds.dtype,
                device=inputs_embeds.device,
                past_key_values_length=past_key_values_length,
            )

        if attention_mask is not None:
            # [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]
            expanded_attn_mask = _expand_mask(attention_mask, inputs_embeds.dtype, tgt_len=input_shape[-1])
            combined_attention_mask = (
                expanded_attn_mask if combined_attention_mask is None else expanded_attn_mask + combined_attention_mask
            )

        return combined_attention_mask

    def quantize(self):
        """Quantize the model weights"""
        for layer in self.layers:
            layer.self_attn.q_proj.quantize()
            layer.self_attn.k_proj.quantize()
            layer.self_attn.v_proj.quantize()
            layer.self_attn.o_proj.quantize()
            layer.mlp.gate_proj.quantize()
            layer.mlp.up_proj.quantize()
            layer.mlp.down_proj.quantize()

def _make_causal_mask(
    input_ids_shape: torch.Size, dtype: torch.dtype, device: torch.device, past_key_values_length: int = 0
):
    """
    Make causal mask used for bi-directional self-attention.
    """
    bsz, tgt_len = input_ids_shape
    mask = torch.full((tgt_len, tgt_len), torch.finfo(dtype).min, device=device)
    mask_cond = torch.arange(mask.size(-1), device=device)
    mask.masked_fill_(mask_cond < (mask_cond + 1).view(mask.size(-1), 1), 0)
    mask = mask.to(dtype)

    if past_key_values_length > 0:
        mask = torch.cat([torch.zeros(tgt_len, past_key_values_length, dtype=dtype, device=device), mask], dim=-1)
    return mask[None, None, :, :].expand(bsz, 1, tgt_len, tgt_len + past_key_values_length)

def _expand_mask(mask: torch.Tensor, dtype: torch.dtype, tgt_len: Optional[int] = None):
    """
    Expands attention_mask from `[bsz, seq_len]` to `[bsz, 1, tgt_seq_len, src_seq_len]`.
    """
    bsz, src_len = mask.size()
    tgt_len = tgt_len if tgt_len is not None else src_len

    expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)

    inverted_mask = 1.0 - expanded_mask

    return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)

# BitNetB158Pipeline.py
#==============================================================================
import torch
import os
from transformers import AutoTokenizer
from BitNetB158Model import BitNetB158Model
from BitNetB158Config import BitNetB158Config
import torch.nn.functional as F

class BitNetB158Pipeline:
    def __init__(self, model_path: str):
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        
        print("Loading tokenizer...")
        self.tokenizer = AutoTokenizer.from_pretrained(model_path)
        
        print("Loading config...")
        config_path = os.path.join(model_path, "config.json")
        if os.path.exists(config_path):
            self.config = BitNetB158Config.from_json(config_path)
        else:
            raise FileNotFoundError(f"Config file not found at {config_path}")

        print("Loading model...")
        self.model = BitNetB158Model(self.config)
        model_file = os.path.join(model_path, "pytorch_model.bin")
        if os.path.exists(model_file):
            state_dict = torch.load(model_file, map_location=self.device)
            self.model.load_state_dict(state_dict, strict=False)
        else:
            raise FileNotFoundError(f"Model file not found at {model_file}")

        self.model.to(self.device)
        self.model.eval()


    def generate(self, prompt: str, max_length: int = 100, temperature: float = 0.7, top_p: float = 0.9, top_k: int = 50):
        input_ids = self.tokenizer.encode(prompt, return_tensors="pt").to(self.device)
        
        print(f"Input shape: {input_ids.shape}")
        print(f"Input tokens: {self.tokenizer.convert_ids_to_tokens(input_ids[0])}")
        
        attention_mask = torch.ones_like(input_ids)
        past_key_values = None

        for _ in range(max_length):
            with torch.no_grad():
                outputs = self.model(
                    input_ids=input_ids[:, -1:],
                    attention_mask=attention_mask,
                    past_key_values=past_key_values,
                    use_cache=True
                )
            logits = outputs["last_hidden_state"][:, -1, :]
            past_key_values = outputs["past_key_values"]
            
            # Apply temperature
            logits = logits / temperature
            
            # Apply top-k filtering
            top_k_logits, top_k_indices = torch.topk(logits, top_k)
            
            # Apply top-p (nucleus) filtering
            top_k_probs = F.softmax(top_k_logits, dim=-1)
            cumulative_probs = torch.cumsum(top_k_probs, dim=-1)
            sorted_indices = torch.argsort(top_k_probs, descending=True)
            sorted_logits = top_k_logits.gather(-1, sorted_indices)
            cumulative_probs = cumulative_probs.gather(-1, sorted_indices)
            last_ind = (cumulative_probs < top_p).sum(dim=-1)
            last_ind[last_ind < 0] = 0
            sorted_logits[0, last_ind:] = float('-inf')
            sorted_indices = sorted_indices[0, :last_ind]

            # Sample from the filtered distribution
            probs = F.softmax(sorted_logits, dim=-1)
            next_token = torch.multinomial(probs, num_samples=1)
            next_token = sorted_indices[next_token]

            input_ids = torch.cat([input_ids, next_token.unsqueeze(0)], dim=-1)
            attention_mask = torch.cat([attention_mask, torch.ones_like(next_token.unsqueeze(0))], dim=-1)
            
            if next_token.item() == self.tokenizer.eos_token_id:
                break
        
        generated_text = self.tokenizer.decode(input_ids[0], skip_special_tokens=True)
        print(f"Final input shape: {input_ids.shape}")
        print(f"Final tokens: {self.tokenizer.convert_ids_to_tokens(input_ids[0])}")
        return generated_text

    def check_model_output(self, prompt: str):
        input_ids = self.tokenizer.encode(prompt, return_tensors="pt").to(self.device)
        with torch.no_grad():
            outputs = self.model(input_ids)
        
        if isinstance(outputs, tuple):
            logits = outputs[0][0, -1, :]  # Accessing the last_hidden_state from the tuple
        else:
            logits = outputs["last_hidden_state"][0, -1, :]
        
        top_k = torch.topk(logits, 10)
        print("Top 10 next token probabilities:")
        for value, index in zip(top_k.values, top_k.indices):
            token = self.tokenizer.decode([index])
            print(f"{token}: {value.item():.4f}")

    def check_model_parameters(self):
        print("Checking model parameters...")
        total_params = 0
        for name, param in self.model.named_parameters():
            if 'quantized_weight' in name:
                print(f"{name}: shape={param.shape}, dtype={param.dtype}")
                total_params += param.numel() * 1.58 / 8  # 1.58 bits per parameter
            elif 'weight_scale' in name:
                print(f"{name}: shape={param.shape}, dtype={param.dtype}")
                total_params += param.numel() * 32 / 8  # 32 bits for float32
            else:
                print(f"{name}: shape={param.shape}, dtype={param.dtype}")
                total_params += param.numel() * 32 / 8  # 32 bits for float32
        
        print(f"\nTotal model size: {total_params / (1024**3):.2f} GB")

def main():
    model_path = "./bitnet_model_saved"

    print("Initializing BitNetB158Pipeline...")
    pipeline = BitNetB158Pipeline(model_path)

    print("Checking model parameters...")
    pipeline.check_model_parameters()

    print("Checking model output...")
    pipeline.check_model_output("Once upon a time")

    print("Testing the model with a sample prompt...")
    prompt = "Once upon a time, in a land far away,"
    generated_text = pipeline.generate(prompt, max_length=50)

    print(f"Prompt: {prompt}")
    print(f"Generated text: {generated_text}")

if __name__ == "__main__":
    main()


# BitNetMLP.py
#==============================================================================
import torch
import torch.nn as nn
import torch.nn.functional as F
from BitNetB158Config import BitNetB158Config
from QuantizedLinear import QuantizedLinear

class BitNetMLP(nn.Module):
    def __init__(self, config: BitNetB158Config):
        super().__init__()
        self.config = config
        self.hidden_size = config.hidden_size
        self.intermediate_size = config.intermediate_size

        self.gate_proj = QuantizedLinear(self.hidden_size, self.intermediate_size, bias=False)
        self.up_proj = QuantizedLinear(self.hidden_size, self.intermediate_size, bias=False)
        self.down_proj = QuantizedLinear(self.intermediate_size, self.hidden_size, bias=False)
        self.act_fn = SwiGLU()

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        gate_output = self.gate_proj(x)
        up_output = self.up_proj(x)
        
        intermediate_output = self.act_fn(gate_output, up_output)
        down_output = self.down_proj(intermediate_output)
        
        return down_output

class SwiGLU(nn.Module):
    def forward(self, gate_output: torch.Tensor, up_output: torch.Tensor) -> torch.Tensor:
        return F.silu(gate_output) * up_output

# convert_llama_to_bitnet.py
#==============================================================================
import torch
import os
from transformers import LlamaForCausalLM, AutoTokenizer
from BitNetB158Model import BitNetB158Model
from BitNetB158Config import BitNetB158Config
from AbsmeanQuantization import AbsmeanQuantization
import torch.nn as nn

def convert_llama_to_bitnet(model_name: str, save_directory: str):
    print(f"Loading LLaMA model: {model_name}")
    llama_model = LlamaForCausalLM.from_pretrained(model_name)
    llama_config = llama_model.config
    llama_tokenizer = AutoTokenizer.from_pretrained(model_name)

    print("Creating BitNet b1.58 configuration")
    bitnet_config = BitNetB158Config(
        vocab_size=llama_config.vocab_size,
        hidden_size=llama_config.hidden_size,
        intermediate_size=llama_config.intermediate_size,
        num_hidden_layers=llama_config.num_hidden_layers,
        num_attention_heads=llama_config.num_attention_heads,
        num_key_value_heads=llama_config.num_attention_heads // 4,
        max_position_embeddings=llama_config.max_position_embeddings,
        rms_norm_eps=llama_config.rms_norm_eps,
        rope_theta=500000,
        attention_bias=False,
    )

    print("Creating BitNet b1.58 model")
    bitnet_model = BitNetB158Model(bitnet_config)

    print("Copying weights from LLaMA to BitNet b1.58 and quantizing")
    bitnet_model.embed_tokens.weight.data = llama_model.model.embed_tokens.weight.data

    for i, (llama_layer, bitnet_layer) in enumerate(zip(llama_model.model.layers, bitnet_model.layers)):
        print(f"Processing layer {i+1}/{len(llama_model.model.layers)}")

        for proj in ['q_proj', 'k_proj', 'v_proj', 'o_proj']:
            llama_weight = getattr(llama_layer.self_attn, proj).weight
            quantized_weight, weight_scale = AbsmeanQuantization.quantize(llama_weight)
            getattr(bitnet_layer.self_attn, proj).quantized_weight.copy_(quantized_weight)
            getattr(bitnet_layer.self_attn, proj).weight_scale.data.copy_(weight_scale)

        for proj in ['gate_proj', 'up_proj', 'down_proj']:
            llama_weight = getattr(llama_layer.mlp, proj).weight
            quantized_weight, weight_scale = AbsmeanQuantization.quantize(llama_weight)
            getattr(bitnet_layer.mlp, proj).quantized_weight.copy_(quantized_weight)
            getattr(bitnet_layer.mlp, proj).weight_scale.data.copy_(weight_scale)

        bitnet_layer.input_layernorm.weight.data = llama_layer.input_layernorm.weight.data
        bitnet_layer.post_attention_layernorm.weight.data = llama_layer.post_attention_layernorm.weight.data

    bitnet_model.norm.weight.data = llama_model.model.norm.weight.data

    os.makedirs(save_directory, exist_ok=True)

    print("Saving the converted model")
    torch.save(bitnet_model.state_dict(), os.path.join(save_directory, "pytorch_model.bin"))

    print("Saving the configuration")
    bitnet_config.to_json(os.path.join(save_directory, "config.json"))

    print("Saving the tokenizer") 
    llama_tokenizer.save_pretrained(save_directory)

    print(f"Converted model, configuration, and tokenizer saved to {save_directory}")

    return bitnet_model, bitnet_config, llama_tokenizer

def main():
    model_name = "meta-llama/Meta-Llama-3.1-8B-Instruct"
    save_directory = "./bitnet_model_saved"
    
    convert_llama_to_bitnet(model_name, save_directory)

if __name__ == "__main__":
    main()


# QuantizedLinear.py
#==============================================================================
import torch
import torch.nn as nn
import torch.nn.functional as F
from AbsmeanQuantization import AbsmeanQuantization

class QuantizedLinear(nn.Module):
    def __init__(self, in_features: int, out_features: int, bias: bool = False):
        super().__init__()
        self.in_features = in_features
        self.out_features = out_features
        
        self.register_buffer('quantized_weight', torch.zeros(out_features, in_features, dtype=torch.int8))
        self.weight_scale = nn.Parameter(torch.ones(out_features, 1))
        
        if bias:
            self.bias = nn.Parameter(torch.zeros(out_features))
        else:
            self.register_parameter('bias', None)

    def forward(self, input: torch.Tensor) -> torch.Tensor:
        dequantized_weight = self.quantized_weight.float() * self.weight_scale
        output = F.linear(input, dequantized_weight, self.bias)
        return output

    def quantize(self):
        quantized_weight, weight_scale = AbsmeanQuantization.quantize(self.weight)
        self.quantized_weight.copy_(quantized_weight)
        self.weight_scale.data.copy_(weight_scale)

# RMSNorm.py
#==============================================================================
import torch
import torch.nn as nn

class RMSNorm(nn.Module):
    def __init__(self, hidden_size: int, eps: float = 1e-6):
        super().__init__()
        self.weight = nn.Parameter(torch.ones(hidden_size))
        self.variance_epsilon = eps

    def forward(self, hidden_states: torch.Tensor) -> torch.Tensor:
        input_dtype = hidden_states.dtype
        variance = hidden_states.to(torch.float32).pow(2).mean(-1, keepdim=True)
        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
        return (self.weight * hidden_states).to(input_dtype)


# RotaryEmbedding.py
#==============================================================================
import torch
import torch.nn as nn
import math

class RotaryEmbedding(nn.Module):
    def __init__(self, dim: int, max_position_embeddings: int = 2048, base: float = 10000.0, device=None):
        super().__init__()
        inv_freq = 1.0 / (base ** (torch.arange(0, dim, 2, device=device).float() / dim))
        self.register_buffer("inv_freq", inv_freq)
        self.max_seq_len_cached = max_position_embeddings
        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)
        freqs = torch.einsum("i,j->ij", t, self.inv_freq)
        emb = torch.cat((freqs, freqs), dim=-1)
        self.register_buffer("cos_cached", emb.cos()[None, None, :, :], persistent=False)
        self.register_buffer("sin_cached", emb.sin()[None, None, :, :], persistent=False)

    def _set_cos_sin_cache(self, seq_len: int):
        self.max_seq_len_cached = seq_len
        t = torch.arange(self.max_seq_len_cached, device=self.inv_freq.device, dtype=self.inv_freq.dtype)
        freqs = torch.einsum("i,j->ij", t, self.inv_freq)
        emb = torch.cat((freqs, freqs), dim=-1)
        self.register_buffer("cos_cached", emb.cos()[None, None, :, :], persistent=False)
        self.register_buffer("sin_cached", emb.sin()[None, None, :, :], persistent=False)
        
    def forward(self, x: torch.Tensor, seq_len: int = None) -> tuple[torch.Tensor, torch.Tensor]:
        if seq_len > self.max_seq_len_cached:
            self._set_cos_sin_cache(seq_len)

        return (
            self.cos_cached[:, :, :seq_len, ...].to(dtype=x.dtype),
            self.sin_cached[:, :, :seq_len, ...].to(dtype=x.dtype),
        )

def rotate_half(x: torch.Tensor) -> torch.Tensor:
    """Rotates half the hidden dims of the input."""
    x1 = x[..., : x.shape[-1] // 2]
    x2 = x[..., x.shape[-1] // 2 :]
    return torch.cat((-x2, x1), dim=-1)

def apply_rotary_pos_emb(q: torch.Tensor, k: torch.Tensor, cos: torch.Tensor, sin: torch.Tensor, position_ids: torch.Tensor) -> tuple[torch.Tensor, torch.Tensor]:
    # The first two dimensions of cos and sin are always 1, so we can `squeeze` them.
    cos = cos.squeeze(1).squeeze(0)  # [seq_len, dim]
    sin = sin.squeeze(1).squeeze(0)  # [seq_len, dim]
    cos = cos[position_ids].unsqueeze(1)  # [bs, 1, seq_len, dim]
    sin = sin[position_ids].unsqueeze(1)  # [bs, 1, seq_len, dim]
    q_embed = (q * cos) + (rotate_half(q) * sin)
    k_embed = (k * cos) + (rotate_half(k) * sin)
    return q_embed, k_embed

